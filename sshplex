#!/usr/bin/env ruby

require 'etc'
require 'logger'
require 'optparse'
require 'reline'
require 'yaml'

$:.push('.')
require 'manager'
require 'output'
require 'plex'

Readline = Reline

options = {
  :forward_agent => false,
  :hosts_file    => nil,
  :loglevel      => :error,
  :mode          => :exec,
  :output        => :inline,
  :user          => nil,

  :alias         => {},
}

CONFIG="#{__dir__}/.sshplex.yml"
if File.exist?(CONFIG)
  options.merge!(YAML::load_file(CONFIG).transform_keys(&:to_sym))
end

op = OptionParser.new do |opts|
  opts.banner  = "usage: sshplex [ options ] hosts"

  opts.on("-A", "--forward-agent") { options[:forward_agent] = true }

  opts.on("-f", "--hosts=HOSTS") { |h| options[:hosts_file] = h }

  opts.on("-l", "--log-level=LEVEL",
          [ :debug, :info, :warn, :error, :fatal ]) { |o| options[:loglevel ] = o }
  opts.on("-v", "--verbose",
          "same as --log-level debug") { options[:loglevel] = :debug }

  opts.on("-m", "--mode=(exec|shell)",
          [ :exec, :shell ]) { |o| options[:mode] = o }
  opts.on("-e", "--exec",  "same as --mode exec")  { options[:mode] = :exec }
  opts.on("-s", "--shell", "same as --mode shell") { options[:mode] = :shell }

  opts.on("-t", "--tmux",
          "use tmux split pane for output") { options[:output] = :tmux }

  opts.on("-u", "--user=USER",
          "remote ssh user") { |o| options[:user] = o }

  opts.on("-h", "--help") do
    puts opts
    exit
  end
end
op.parse!

hosts  = []
filter = []

if options[:hosts_file]
  hosts = File.readlines(options[:hosts_file]).map(&:chomp)
  if ARGV.length > 0
    filter = ARGV
  end
else
  hosts = ARGV
end

raise OptionParser::MissingArgument, "\n#{op.banner}" if hosts.empty?

plex_logger = Logger.new(STDERR, level: Logger.const_get(options[:loglevel].upcase))
cli_logger  = Logger.new(STDERR, level: Logger::INFO)

case options[:output]
when :inline
  out = Output.stdout
when :tmux
  out = Output.tmux
end

manager = Manager.new(hosts,
                      alias:       options[:alias],
                      agent:       options[:forward_agent],
                      cli_logger:  cli_logger,
                      filter:      filter,
                      plex_logger: plex_logger,
                      mode:        options[:mode],
                      out:         out,
                      user:        options[:user])


Readline.vi_editing_mode


at_exit { Output.cleanup }

begin
  loop do
    manager.process
    manager.prompt
  end
rescue Interrupt
  cli_logger.info("interrupted at prompt")
  exit 1
end

