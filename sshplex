#!/usr/bin/env ruby

require 'etc'
require 'net/ssh'
require 'optparse'
require 'reline'

Readline = Reline

options = {}
op = OptionParser.new do |opts|
  opts.banner  = "usage: sshplex [ options ] hosts"

  options[:user] = nil
  opts.on("-u", "--user=USER", "remote ssh user") { |o| options[:user] = o }

  options[:mode] = :exec
  opts.on("-m", "--mode=(exec|shell)", [ :exec, :shell ]) { |o| options[:mode] = o }

  opts.on("-e", "--exec",  "same as --mode exec")  { options[:mode] = :exec }
  opts.on("-s", "--shell", "same as --mode shell") { options[:mode] = :shell }

  opts.on("-h", "--help") do

    puts opts
    exit
  end
end
op.parse!

hosts = ARGV
raise OptionParser::MissingArgument, "\n#{op.banner}" if hosts.empty?

class Plex
  attr_reader :hostname

  # https://stackoverflow.com/a/29497680
  ANSI_ESCAPE_CODES = Regexp.new('[\u001b\u009b][\[();?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]')

  def initialize(hostname, **kwargs)
    @hostname = hostname

    @out =  kwargs[:out]  || STDOUT
    @user = kwargs[:user] # when nil ~/.ssh/config is used
    @mode = kwargs[:mode] || :exec

    @buffer = []

    @idle = false
    @eof  = false

    @prompt = Regexp.new('(^% | \d+ \$ )$') # ymmv

    self.open
  end

  def open
    @ssh = Net::SSH.start(@hostname, @user, verbose: :error)
    case @mode
    when :exec
      @idle = true  # exec channel is opened every time, so consider it idle at start
    when :shell
      @idle = false # process shell channel setup before accepting commands
      self.shell
    end
  end

  def shell
    @shell = @ssh.open_channel do |channel|
      # STDERR.puts "[plex] established shell channel to #{@hostname}"

      channel.request_pty do |ch, success|
        raise RuntimeError, "pty failed" unless success
      end

      channel.send_channel_request("shell") do |ch, success|
        raise RuntimeError, "shell failed" unless success

        ch.on_data do |ch, data|
          @buffer << data
        end

        ch.on_extended_data do |ch, type, data|
          @buffer << data
        end

        ch.on_request("exit-status") do |ch, data|
          code = data.read_long
          @buffer << "# exit: #{code}\n"
          @eof = true
        end

        ch.on_request("exit-signal") do |ch, data|
          signal = data.read_long
          @buffer << "# signal: #{signal}\n"
          @eof = true
        end
      end
    end
  end

  def exec(cmd)
    @exec = @ssh.open_channel do |channel|
      # STDERR.puts "[plex] established exec channel to #{@hostname}"

      channel.exec(cmd) do |ch, success|
        raise RuntimeError, "exec failed" unless success

        ch.on_data do |ch, data|
          @buffer << data
        end

        ch.on_extended_data do |ch, type, data|
          @buffer << data
        end

        ch.on_request("exit-status") do |ch, data|
          code = data.read_long
          @buffer << "# exit: #{code}\n"
          @idle = true
        end

        ch.on_request("exit-signal") do |ch, data|
          signal = data.read_long
          @buffer << "# signal: #{signal}\n"
          @idle = true
        end
      end
    end
  end

  def process
    @ssh.process(0.1)
    unless @buffer.empty?

      # join buffer lines, strip out ANSI chaos
      clean = @buffer.join.gsub(ANSI_ESCAPE_CODES, '').gsub("\r", "")

      # emit all the \n terminated lines, keep the current in-progress line
      lines   = clean.split(/\n/, -1)
      current = lines.pop
      emit    = lines.join("\n")

      unless emit.empty?
        @out.puts emit
      end

      if current.empty?
        @buffer = [] # avoid a buffer of just ""
      else
        @buffer = [ current ]
      end

      if current.match(@prompt)
        @idle = true
        @out.puts current.gsub(@prompt, '')

        @buffer = []
      end
    end
  end

  def send(data)
    @idle = false

    case @mode
    when :shell
      @buffer = [ 'sshplex% ' ]         # add synthetic prompt to output
      @shell.send_data(data + "\n")
    when :exec
      @buffer = [ "# exec: #{data}\n" ] # record command in output
      self.exec(data)
    end
  end

  def idle?
    @idle
  end

  def eof?
    @eof
  end
end

class Outputter
  def initialize(prefix = "", io = STDOUT)
    @io = io
    @prefix = prefix
    @io.sync = true
  end

  def puts(data)
    @io.puts(data.split("\n").map { |l| "#{@prefix} #{l}" }.join("\n"))
  end

  def print(data)
    @io.print(data.split("\n").map { |l| "#{@prefix} #{l}" }.join("\n"))
  end
end


plex = hosts.map { |h| Plex.new(h,
                                user: options[:user],
                                mode: options[:mode],
                                out: Outputter.new("[#{h}]", STDOUT),
                               ) }
mode = options[:mode]

# STDERR.puts "[loop]"

loop do

  pending = plex.select { |p| !p.eof? }

  while pending.length > 0
    p = pending.shift
    p.process

    next if p.eof?
    next if p.idle?

    pending.push(p)
  end

  if plex.select { |p| !p.eof? }.empty?
    STDERR.puts "[all done]"
    exit 0
  end

  cmd = Readline.readline("sshplex% ")
  break if cmd.nil?
  next if cmd.empty?

  plex.each do |p|
    p.send(cmd)
  end
end

